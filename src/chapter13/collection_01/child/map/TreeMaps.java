package chapter13.collection_01.child.map;

public class TreeMaps {

    /**
     * Tree 구조의 데이터 검색 방법 및 시간 복잡도 계산
     *
     * */

    /**
     * 그럼에도 불구하고 왜 Tree 컬렉션보다 Hash 컬렉션을 자주 쓰는 이유
     * 1. Tree는 항상 정렬(트리 밸런싱)이 되어있어야 함(데이터 추가/삭제의 오버헤드)
     * 2. 일반적인 비즈니스에서는 컴퓨터가 1대1 해싱하지 못할 규모의 데이터를 처리하는 경우가 극히 드물다
     * 3. 단일 검색이나 데이터 추가/삭제 등에 사실상 특화된 자료 구조가 HashTable 이며 이 이후에 나온 것이 바로 HashMap이다.
     *
     * HashMap보다 TreeMap을 써야하는 경우
     * 1. 범위 검색(위의 Tree 데이터 검색 방법 참고)
     * 2. 정렬(Tree는 기본적으로 정렬되어 있어야 하므로 추가적인 정렬 작업이 필요하지 않은 까닭)
     *
     * */
}
