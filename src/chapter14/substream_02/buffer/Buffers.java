package chapter14.substream_02.buffer;

public class Buffers {
    /**
     * Buffered IO 와 Non-Buffered IO, Flush
     *
     * - 어떠한 하드웨어든 콘솔을 가질 수 있는데 그 하드웨어는 드라이버를 가지고 그 드라이버를 통해서 파일을 읽거나 쓰거나 실행하거나를 수행한다.
     *   이 과정에서 모든 파일은 버퍼를 가지고 있고 파일에 직접 읽기와 쓰기를 하는 것이 아닌 이 버퍼에 대해서 읽거나 쓰거나를 수행할 수 있다.
     *
     * - 그래서 이 버퍼를 사용하면 버퍼 IO이고 그것이 아니라면 non-버퍼 IO가 된다.
     *
     * - 버퍼는 입력 버퍼와 출력 버퍼로 보통 나뉘어져 있다. 예를 들어 콘솔 IO 버퍼라고 하면 입력 버퍼는 키보드가 사용할 것이고 출력 버퍼는 콘솔이 쓸 것이다.
     *   보통 input은 버퍼를 안두는 경우가 많고 output은 버퍼를 두는 경우가 많다.
     *
     * - 그리고 이 버퍼를 입력 버퍼에서 출력으로 쏟아내주는 것을 flush라고 한다. 입력 버퍼에 flush를 하는 경우는 거의 없다.
     *
     * */

    /**
     * 입출력 버퍼를 사용하는 이유
     * 1. 정의
     *   입출력 버퍼는 데이터를 일시적으로 저장하는 메모리 공간으로 데이터를 읽거나 쓸 때 효율성을 높이기 위해 사용된다.
     *
     * 2. 입출력 버퍼의 장점
     *   2.1 원활한 데이터 입출력 제공
     *       데이터가 연속적으로 재생가능한 저장 구간을 만들어서 통신 끊김 현상을 최소화한다.
     *
     *   2.2 네트워크 불안정성 대응
     *       네트워크 상태가 불안정할 때도 일정 시간 동안 끊김 없이 통신할 수 있다.
     *
     *   2.3 데이터 전송 효율성 증가
     *       데이터를 큰 덩어리로 묶어서 전송하여 전송 통신 연결을 하는데 필요한 리소스를 줄인다.
     *
     *   2.4 서버 부하 감소
     *       버퍼를 통해 클라이언트가 서버에 자주 요청하지 않도록 하여 서버 부하를 줄인다.
     *
     * 3. 입출력 버퍼의 단점
     *   3.1 초기 버퍼링 시간
     *       데이터 통신 시 미리 데이터 버퍼링을 하는 시간이 필요하다.
     *
     *   3.2 메모리 사용 증가
     *       버퍼를 사용하기 위해서 추가적인 데이터 저장에 필요한 메모리 공간을 요구한다.
     *
     *   3.3 버퍼 오버플로우 및 언더플로우 문제
     *       네트워크 상태나 데이터 소비 속도에 따라 버퍼에 저장되는 데이터가 버퍼의 용량을 초과하거나
     *       데이터 소비 속도가 데이터 공급 속도보다 빠를 때, 즉 버퍼가 비는 문제가 발생할 수 있다.
     *
     *   3.4 데이터 지연 문제
     *       버퍼링으로 인해 실시간 데이터 전송에 지연이 발생할 수 있다.
     *       버퍼를 채우거나 데이터가 모두 버퍼에 담긴 이후에 통신이 이루어지는 경우가 있을 수 있기 때문이다.
     * */
    public static void main ( String[] args ) {

    }
}
