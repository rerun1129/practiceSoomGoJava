package chapter15.enum_01;

import java.util.Enumeration;
import java.util.Iterator;

public enum Enums {

    /**
     * 열거형
     *   1.열거형의 도입 이유
     *     기존에는 인터페이스나 클래스 내에서 상수를 선언함으로써 상수를 관리 하였는데
     *     클래스 내에서 선언하는 부분은 이름이 겹칠 수 있고 불필요하게 상수가 많아지는 단점이 있다.
     *     인터페이스로 관리하는 경우 이런 부분은 줄어들지만 여전히 IDE의 지원을 적극적으로 받을 수 없고
     *     타입 안정성이 떨어지는 단점을 가지고 있었다. 이를 보완하며 나온 것이 Enum이다.
     *   2. 특징
     *     2.1. 클래스를 상수처럼 사용할 수 있다
     *      2.1.1. 생성자의 기본 접근제어자는 private 으로 설정, public 으로 변경하는 경우 컴파일 에러가 발생
     *      2.1.2. 사용법은 클래스명.필드명
     *      2.1.3. 기본적으로 열거형은 static 특성을 가지기 때문에 클래스 로드 시점에 선언된다,
     *     2.2. Enum 클래스는 상수 값의 특성과 유사하게 유일하게 하나의 인스턴스가 생성되어 사용된다
     *     2.3. 서로 관련 있는 상수 값들을 모아 enum으로 구현하는 경우 유용하다
     *     2.4. 클래스와 같은 문법 체계를 따른다
     *     2.5. 상속을 지원하지 않는다
     *      2.5.1. 모든 열거형들은 내부적으로 java.lang.enum 클래스에 의해 상속되기 때문에
     *             다중 상속을 지원하지 않는 자바의 특성상 열거형은 다른 클래스를 상속받을 수 없다.
     *      2.5.2. 상속은 지원하지 않지만 인터페이스의 구현은 가능하다.
     *   3. 열거형의 내부 API
     *     3.1. values()
     *       3.1.1. 열거형이 가지고 있는 모든 상수 값을 배열의 형태로 리턴한다.
     *       3.1.2. String 형태로 반환하는 것이 아닌 열거형의 인스턴스 형식으로 리턴한다.
     *     3.2. valueOf()
     *       3.2.1. valueOf() 메서드는 String을 파라미터로 받는데 인자로 들어온 String과 일치하는
     *             상수 인스턴스가 존재하면 그 인스턴스를 반환한다.
     *     3.3. ordinal()
     *       3.3.1. Enum 클래스 내부에 있는 상수들의 Index 를 리턴하는 메소드이다. 배열과 마찬가지로 0부터 인덱스가 시작한다.
     *   4. 사용 하는 경우
     *     4.1. 데이터들 간의 연관관계 표현
     *     4.2. 상태와 행위를 한 곳에서 관리(책임 소재를 명확히 한다)
     *     4.3. 데이터 그룹 관리
     * */

}
